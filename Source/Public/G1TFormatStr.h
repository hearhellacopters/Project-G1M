#pragma once

#ifndef G1T_FORMAT_STR_H
#define G1T_FORMAT_STR_H

// For texture debugging
// Source: https://github.com/hearhellacopters/G1T

std::string getPS3FormatStr(uint8_t format)
{
	switch (format)
	{
	case 0x00: return "CELL_GCM_TEXTURE_R8G8B8A8";
	case 0x01: return "CELL_GCM_TEXTURE_R8G8B8A8";
	case 0x02: return "CELL_GCM_TEXTURE_R32_FLOAT";
	case 0x03: return "CELL_GCM_TEXTURE_RGBA16_FLOAT";
	case 0x04: return "CELL_GCM_TEXTURE_R32_G32_B32_A32_FLOAT";
	case 0x05: return "CELL_GCM_TEXTURE_DEPTH_STENCIL_INT_24_8";
	case 0x06: return "CELL_GCM_TEXTURE_COMPRESSED_DXT1";
	case 0x07: return "CELL_GCM_TEXTURE_COMPRESSED_DXT23";
	case 0x08: return "CELL_GCM_TEXTURE_COMPRESSED_DXT45";
	case 0x09: return "CELL_GCM_TEXTURE_A8R8G8B8";
	case 0x0A: return "CELL_GCM_TEXTURE_A8R8G8B8";
	case 0x0B: return "CELL_GCM_TEXTURE_X32_FLOAT";
	case 0x0C: return "CELL_GCM_TEXTURE_W16_Z16_Y16_X16_FLOAT";
	case 0x0D: return "CELL_GCM_TEXTURE_W32_Z32_Y32_X32_FLOAT";
	case 0x0F: return "CELL_GCM_TEXTURE_A8";
	case 0x10: return "CELL_GCM_TEXTURE_COMPRESSED_DXT1";
	case 0x11: return "CELL_GCM_TEXTURE_COMPRESSED_DXT23";
	case 0x12: return "CELL_GCM_TEXTURE_COMPRESSED_DXT45";
	case 0x13: return "CELL_GCM_TEXTURE_DEPTH24_D8";
	case 0x14: return "CELL_GCM_TEXTURE_D16";
	case 0x15: return "CELL_GCM_TEXTURE_DEPTH16";
	case 0x16: return "CELL_GCM_TEXTURE_R16";
	case 0x17: return "CELL_GCM_TEXTURE_X16";
	case 0x18: return "CELL_GCM_TEXTURE_B8";
	case 0x19: return "CELL_GCM_TEXTURE_B5G6R5";
	case 0x1A: return "CELL_GCM_TEXTURE_B5G5R5A1";
	case 0x1B: return "CELL_GCM_TEXTURE_A4G4G4B4";
	case 0x1C: return "CELL_GCM_TEXTURE_R5G6B5";
	case 0x1D: return "CELL_GCM_TEXTURE_A1R5G5B5";
	case 0x1E: return "CELL_GCM_TEXTURE_A4R4G4B4";
	case 0x1F: return "CELL_GCM_TEXTURE_R32_FLOAT";
	case 0x20: return "CELL_GCM_TEXTURE_DEPTH24_D8_FLOAT";
	case 0x21: return "CELL_GCM_TEXTURE_B8R8G8A8";
	case 0x22: return "CELL_GCM_TEXTURE_D8R8G8B8";
	case 0x23: return "CELL_GCM_TEXTURE_R16_G16";
	case 0x24: return "CELL_GCM_TEXTURE_Y16_X16";
	case 0x7D: return "ASTC_FORMAT";
	case 0x7E: return "ASTC_FORMAT";
	default:   return "Unknown format";
		break;
	}
}
std::string getX360FormatStr(uint8_t format)
{
	switch (format)
	{
	case 0x00: return "RGBA8_UNORM";
	case 0x01: return "BGRA8_UNORM";
	case 0x02: return "R32_FLOAT";
	case 0x03: return "RGBA16_FLOAT";
	case 0x04: return "RGBA32_FLOAT";
	case 0x05: return "D24S8";
	case 0x06: return "DXT1";
	case 0x07: return "DXT3";
	case 0x08: return "DXT5";
	case 0x09: return "R8G8B8A8_UNORM";
	case 0x0A: return "B8G8R8A8_UNORM";
	case 0x0B: return "R32_FLOAT";
	case 0x0C: return "RGBA16_FLOAT";
	case 0x0D: return "RGBA32_FLOAT";
	case 0x0E: return "A2BGR10_FLOAT";
	case 0x0F: return "A8";
	case 0x10: return "DXT1";
	case 0x11: return "DXT3";
	case 0x12: return "DXT5";
	case 0x13: return "D24S8";
	case 0x14: return "D16";
	case 0x15: return "D16";
	case 0x16: return "R16";
	case 0x17: return "R16";
	case 0x18: return "A8";
	case 0x19: return "B5G6R5";
	case 0x1A: return "B5G5R5A1";
	case 0x1B: return "ARGB4_UNORM";
	case 0x1C: return "B5G6R5";
	case 0x1D: return "B5G5R5A1";
	case 0x1E: return "ARGB4_UNORM";
	case 0x1F: return "R32_FLOAT";
	case 0x20: return "R32_FLOAT";
	case 0x21: return "BGRA8_UNORM";
	case 0x22: return "RGBP8_UNORM";
	case 0x23: return "RG16";
	case 0x24: return "RG16";
	case 0x26: return "G8R8";
	case 0x27: return "G8R8";
	case 0x28: return "R8";
	case 0x29: return "R8";
	case 0x2A: return "R8";
	case 0x2C: return "L8";
	case 0x2E: return "L8A8";
	case 0x30: return "R8";
	case 0x32: return "R4 (Likely an error)";
	case 0x33: return "R4 (Likely an error)";
	case 0x34: return "R5G6B5";
	case 0x35: return "R5G5B5A1";
	case 0x36: return "RGBA4_UNORM";
	case 0x39: return "R4 (Likely an error)";
	case 0x3A: return "R32_I";
	case 0x3B: return "R5G6B5";
	case 0x3C: return "R5G5B5A1";
	case 0x3D: return "RGBA4_UNORM";
	case 0x3E: return "R4 (Likely an error)";
	case 0x3F: return "R32_I";
	case 0x40: return "RGB10_A2";
	case 0x41: return "RGBA16";
	case 0x42: return "RGB10_A2";
	case 0x43: return "RGB16";
	case 0x4C: return "RG32";
	case 0x4D: return "RG32";
	case 0x7D: return "ASTC_FORMAT";
	case 0x7E: return "ASTC_FORMAT";
	default:   return "Unknown format";
		break;
	}
}

std::string getNWiiFormatStr(uint8_t format)
{
	switch (format)
	{
	case 0x0A: return "GX_TF_RGBA8";
	case 0x10: return "BC1";
	case 0x13: return "GX_TF_Z24X8";
	case 0x15: return "GX_TF_Z16";
	case 0x18: return "GX_TF_I8";
	case 0x1C: return "GX_TF_RGB565";
	case 0x22: return "GX_TF_RGBA8";
	case 0x25: return "GX_TF_RGB5A3";
	case 0x26: return "GX_TF_IA8";
	case 0x27: return "GX_TF_IA8";
	case 0x28: return "GX_TF_I8";
	case 0x29: return "GX_TF_I8";
	case 0x2A: return "GX_TF_I8";
	case 0x2B: return "GX_TL_IA8";
	case 0x2C: return "GX_TF_I8";
	case 0x2D: return "GX_TF_IA4";
	case 0x2E: return "GX_TF_IA8";
	case 0x2F: return "GX_TL_IA8";
	case 0x30: return "GX_TF_Z8";
	case 0x31: return "GX_TF_CI4";
	case 0x32: return "GX_TF_CI8";
	case 0x33: return "GX_TF_CI14";
	case 0x7D: return "ASTC_FORMAT";
	case 0x7E: return "ASTC_FORMAT";
	default:   return "Unknown format";
		break;
	}
}

std::string getN3DSFormatStr(uint8_t format)
{
	switch (format)
	{
	case 0x09: return "PICA_RGBA UNSIGNED_BYTE";
	case 0x13: return "PICA_RGBA UNSIGNED_BYTE";
	case 0x15: return "PICA_R16 UNSIGNED_BYTE";
	case 0x18: return "PICA_A UNSIGNED_BYTE";
	case 0x2b: return "PICA_LUMINANCE PICA_UNORM_4_HALF_BYTE";
	case 0x2c: return "PICA_LUMINANCE UNSIGNED_BYTE";
	case 0x2d: return "PICA_LUMINANCE_A PICA_UNORM_44_BYTE";
	case 0x2e: return "PICA_LUMINANCE_A UNSIGNED_BYTE";
	case 0x3b: return "PICA_RGB UNSIGNED_SHORT_5_6_5";
	case 0x3c: return "PICA_RGBA UNSIGNED_SHORT_5_5_5_1";
	case 0x3d: return "PICA_RGBA UNSIGNED_SHORT_4_4_4_4";
	case 0x44: return "PICA_A PICA_UNORM_4_HALF_BYTE";
	case 0x45: return "PICA_RGB UNSIGNED_BYTE";
	case 0x46: return "PICA_R16 UNSIGNED_BYTE";
	case 0x47: return "PICA_ETC1_RGB8";
	case 0x48: return "PICA_ETC1_RGB8A4";
	case 0x4a: return "PICA_RGB UNSIGNED_BYTE";
	case 0x7D: return "ASTC_FORMAT";
	case 0x7E: return "ASTC_FORMAT";
	default:   return "Unknown format";
		break;
	}
}

std::string getPSVitaFormatStr(uint8_t format)
{
	switch (format)
	{                 // for RGBA standard is ABGR Channel 1 is Alpha, 2 is Blue, 3 is Green and Red is 4
	case 0x00: return "SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_SWIZZLE4_ABGR SCE_GXM_TEXTURE_FORMAT_U8_SWIZZLE1_R";
	case 0x01: return "SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_SWIZZLE4_ARGB SCE_GXM_COLOR_SWIZZLE4_ARGB_";
	case 0x02: return "SCE_GXM_TEXTURE_FORMAT_F32_SWIZZLE1_000R SCE_GXM_COLOR_BASE_FORMAT_F32_";
	case 0x03: return "SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_SWIZZLE4_ABGR SCE_GXM_TEXTURE_FORMAT_S8_SWIZZLE1_R";
	case 0x05: return "SCE_GXM_TEXTURE_FORMAT_X8U24_SWIZZLE2_SD SCE_GXM_DEPTH_STENCIL_FORMAT_S8D24_";
	case 0x06: return "SCE_GXM_TEXTURE_FORMAT_UBC1_SWIZZLE4_ABGR";
	case 0x07: return "SCE_GXM_TEXTURE_FORMAT_UBC2_SWIZZLE4_ABGR";
	case 0x08: return "SCE_GXM_TEXTURE_FORMAT_UBC3_SWIZZLE4_ABGR";
	case 0x09: return "SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_SWIZZLE4_ABGR SCE_GXM_TEXTURE_FORMAT_U8_SWIZZLE1_R";
	case 0x0A: return "SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_SWIZZLE4_ARGB SCE_GXM_COLOR_SWIZZLE4_ARGB_";
	case 0x0B: return "SCE_GXM_TEXTURE_FORMAT_F32_SWIZZLE1_000R SCE_GXM_COLOR_BASE_FORMAT_F32_";
	case 0x0C: return "SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_SWIZZLE4_ABGR SCE_GXM_TEXTURE_FORMAT_S8_SWIZZLE1_R";
	case 0x0E: return "SCE_GXM_TEXTURE_FORMAT_U2F10F10F10_SWIZZLE4_ABGR SCE_GXM_COLOR_BASE_FORMAT_U2F10F10F10_";
	case 0x0F: return "SCE_GXM_TEXTURE_FORMAT_U8_SWIZZLE1_R000 SCE_GXM_COLOR_FORMAT_U8_A_";
	case 0x10: return "SCE_GXM_TEXTURE_FORMAT_UBC1_SWIZZLE4_ABGR";
	case 0x11: return "SCE_GXM_TEXTURE_FORMAT_UBC2_SWIZZLE4_ABGR";
	case 0x12: return "SCE_GXM_TEXTURE_FORMAT_UBC3_SWIZZLE4_ABGR";
	case 0x13: return "SCE_GXM_TEXTURE_FORMAT_X8U24_SWIZZLE2_SD SCE_GXM_DEPTH_STENCIL_FORMAT_S8D24_";
	case 0x14: return "SCE_GXM_TEXTURE_FORMAT_U16_SWIZZLE1_R SCE_GXM_DEPTH_STENCIL_FORMAT_D16_";
	case 0x15: return "SCE_GXM_TEXTURE_FORMAT_U16_SWIZZLE1_R SCE_GXM_DEPTH_STENCIL_FORMAT_D16_";
	case 0x16: return "SCE_GXM_TEXTURE_FORMAT_U16_SWIZZLE1_000R SCE_GXM_COLOR_FORMAT_U16_R_";
	case 0x17: return "SCE_GXM_TEXTURE_FORMAT_U16_SWIZZLE1_000R SCE_GXM_COLOR_FORMAT_U16_R_";
	case 0x18: return "SCE_GXM_TEXTURE_FORMAT_U8_SWIZZLE1_R000 SCE_GXM_COLOR_FORMAT_U8_A_";
	case 0x19: return "SCE_GXM_TEXTURE_FORMAT_U5U6U5_SWIZZLE3_RGB SCE_GXM_COLOR_FORMAT_U5U6U5_RGB_";
	case 0x1A: return "SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_SWIZZLE4_ARGB SCE_GXM_COLOR_FORMAT_A1R5G5B5_";
	case 0x1B: return "SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_SWIZZLE4_ARGB SCE_GXM_COLOR_FORMAT_A4R4G4B4_";
	case 0x1C: return "SCE_GXM_TEXTURE_FORMAT_U5U6U5_SWIZZLE3_RGB SCE_GXM_COLOR_FORMAT_U5U6U5_RGB_";
	case 0x1D: return "SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_SWIZZLE4_ARGB SCE_GXM_COLOR_FORMAT_A1R5G5B5_";
	case 0x1E: return "SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_SWIZZLE4_ARGB SCE_GXM_COLOR_FORMAT_A4R4G4B4_";
	case 0x1F: return "SCE_GXM_TEXTURE_FORMAT_F32M_SWIZZLE1_R SCE_GXM_DEPTH_STENCIL_FORMAT_DF32_";
	case 0x20: return "SCE_GXM_TEXTURE_FORMAT_F32M_SWIZZLE1_R SCE_GXM_DEPTH_STENCIL_FORMAT_DF32_";
	case 0x21: return "SCE_GXM_TEXTURE_FORMAT_X8U8U8U8_SWIZZLE4_1RGB SCE_GXM_COLOR_SWIZZLE4_ARGB_";
	case 0x22: return "SCE_GXM_TEXTURE_FORMAT_X8U8U8U8_SWIZZLE4_1RGB SCE_GXM_COLOR_SWIZZLE4_ARGB_";
	case 0x23: return "SCE_GXM_TEXTURE_FORMAT_U16U16_SWIZZLE2_RGGG SCE_GXM_COLOR_FORMAT_U16U16_RG_";
	case 0x24: return "SCE_GXM_TEXTURE_FORMAT_U16U16_SWIZZLE2_RGGG SCE_GXM_COLOR_FORMAT_U16U16_RG_";
	case 0x27: return "SCE_GXM_TEXTURE_FORMAT_U8U8_SWIZZLE2_GRRR SCE_GXM_COLOR_FORMAT_U8U8_AR_";
	case 0x29: return "SCE_GXM_COLOR_FORMAT_U8_A_";
	case 0x2A: return "SCE_GXM_TEXTURE_FORMAT_U8_SWIZZLE1_000R SCE_GXM_COLOR_FORMAT_U8_R_";
	case 0x2C: return "SCE_GXM_TEXTURE_FORMAT_U8_SWIZZLE1_1RRR SCE_GXM_COLOR_FORMAT_U8_R_";
	case 0x2E: return "SCE_GXM_TEXTURE_FORMAT_U8U8_SWIZZLE2_GRRR SCE_GXM_COLOR_FORMAT_U8U8_AR_";
	case 0x30: return "SCE_GXM_TEXTURE_FORMAT_U8_SWIZZLE1_111R";
	case 0x31: return "SCE_GXM_TEXTURE_FORMAT_P4_SWIZZLE4_ABGR";
	case 0x32: return "SCE_GXM_TEXTURE_FORMAT_P8_SWIZZLE4_ABGR";
	case 0x34: return "SCE_GXM_TEXTURE_FORMAT_U5U6U5_SWIZZLE3_BGR SCE_GXM_COLOR_FORMAT_U5U6U5_BGR_";
	case 0x35: return "SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_SWIZZLE4_ABGR SCE_GXM_COLOR_FORMAT_U1U5U5U5_ABGR";
	case 0x36: return "SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_SWIZZLE4_ABGR SCE_GXM_COLOR_FORMAT_U4U4U4U4_ABGR";
	case 0x37: return "SCE_GXM_TEXTURE_FORMAT_P4_SWIZZLE4_ABGR";
	case 0x38: return "SCE_GXM_TEXTURE_FORMAT_P8_SWIZZLE4_ABGR";
	case 0x3B: return "SCE_GXM_TEXTURE_FORMAT_U5U6U5_SWIZZLE3_BGR SCE_GXM_COLOR_FORMAT_U5U6U5_BGR_";
	case 0x3C: return "SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_SWIZZLE4_ABGR SCE_GXM_COLOR_FORMAT_U1U5U5U5_ABGR";
	case 0x3D: return "SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_SWIZZLE4_ABGR SCE_GXM_COLOR_FORMAT_U4U4U4U4_ABGR";
	case 0x40: return "SCE_GXM_TEXTURE_FORMAT_U2U10U10U10_SWIZZLE4_ABGR SCE_GXM_COLOR_FORMAT_U2U10U10U10_ABGR";
	case 0x41: return "SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_SWIZZLE4_ABGR";
	case 0x42: return "SCE_GXM_TEXTURE_FORMAT_U2U10U10U10_SWIZZLE4_ABGR SCE_GXM_COLOR_FORMAT_U2U10U10U10_ABGR";
	case 0x43: return "SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_SWIZZLE4_ABGR";
	case 0x45: return "SCE_GXM_TEXTURE_FORMAT_U8U8U8_SWIZZLE3_BGR SCE_GXM_TEXTURE_FORMAT_S16S16_SWIZZLE2_GR";
	case 0x46: return "SCE_GXM_TEXTURE_FORMAT_U8U8_SWIZZLE2_00GR SCE_GXM_COLOR_BASE_FORMAT_U8U8_";
	case 0x49: return "SCE_GXM_TEXTURE_FORMAT_U8U8U8_SWIZZLE3_BGR SCE_GXM_TEXTURE_FORMAT_S16S16_SWIZZLE2_GR";
	case 0x4C: return "SCE_GXM_TEXTURE_FORMAT_F32F32_SWIZZLE2_RGGG SCE_GXM_COLOR_FORMAT_F32F32_RG_";
	case 0x4D: return "SCE_GXM_TEXTURE_FORMAT_F32F32_SWIZZLE2_RGGG SCE_GXM_COLOR_FORMAT_F32F32_RG_";
	case 0x4E: return "SCE_GXM_TEXTURE_FORMAT_F32M_SWIZZLE1_R SCE_GXM_DEPTH_STENCIL_FORMAT_DF32_";
	case 0x4F: return "SCE_GXM_TEXTURE_FORMAT_F32M_SWIZZLE1_R SCE_GXM_DEPTH_STENCIL_FORMAT_DF32_";
	case 0x50: return "SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP_SWIZZLE4_ABGR";
	case 0x51: return "SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP_SWIZZLE4_ABGR";
	case 0x52: return "SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_SWIZZLE4_ABGR";
	case 0x53: return "SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_SWIZZLE4_ABGR";
	case 0x54: return "SCE_GXM_TEXTURE_FORMAT_U8_SWIZZLE1_1RRR";
	case 0x55: return "SCE_GXM_TEXTURE_FORMAT_U8U8_SWIZZLE2_GRRR";
	case 0x67: return "SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_SWIZZLE4_ABGR SCE_GXM_TEXTURE_FORMAT_U8_SWIZZLE1_R";
	case 0x68: return "SCE_GXM_TEXTURE_FORMAT_U8U8_SWIZZLE2_00GR SCE_GXM_COLOR_BASE_FORMAT_U8U8_";
	case 0x69: return "SCE_GXM_TEXTURE_FORMAT_F16F16_SWIZZLE2_00GR SCE_GXM_COLOR_BASE_FORMAT_F16F16_";
	case 0x6A: return "SCE_GXM_TEXTURE_FORMAT_F16_SWIZZLE1_000R SCE_GXM_COLOR_BASE_FORMAT_F16_";
	case 0x6B: return "SCE_GXM_TEXTURE_FORMAT_F10F11F11_SWIZZLE3_BGR SCE_GXM_COLOR_BASE_FORMAT_F11F11F10_";
	case 0x6C: return "SCE_GXM_TEXTURE_FORMAT_F32M_SWIZZLE1_R SCE_GXM_DEPTH_STENCIL_FORMAT_DF32_S8_";
	case 0x6D: return "SCE_GXM_TEXTURE_FORMAT_F32M_SWIZZLE1_R SCE_GXM_DEPTH_STENCIL_FORMAT_DF32_S8_";
	case 0x7D: return "ASTC_FORMAT";
	case 0x7E: return "ASTC_FORMAT";
	default:   return "Unknown format";
		break;
	}
}

std::string getAndroidFormatStr(uint8_t format)
{
	switch (format)
	{
	case 0x00: return "GL_RGBA GL_RGBA GL_UNSIGNED_BYTE";
	case 0x01: return "GL_BGRA GL_BGRA GL_UNSIGNED_BYTE";
	case 0x02: return "GL_R32F GL_RED GL_FLOAT";
	case 0x03: return "GL_RGBA16F GL_RGBA GL_HALF_FLOAT";
	case 0x04: return "GL_RGBA32F GL_RGBA GL_FLOAT";
	case 0x05: return "GL_DEPTH_STENCIL GL_DEPTH_STENCIL GL_UNSIGNED_INT_24_8";
	case 0x06: return "GL_COMPRESSED_RGBA_S3TC_DXT1_EXT GL_RGBA GL_UNSIGNED_BYTE";
	case 0x07: return "GL_COMPRESSED_RGBA_S3TC_DXT3_EXT GL_RGBA GL_UNSIGNED_BYTE";
	case 0x08: return "GL_COMPRESSED_RGBA_S3TC_DXT5_EXT GL_RGBA GL_UNSIGNED_BYTE";
	case 0x0F: return "GL_ALPHA GL_ALPHA GL_UNSIGNED_BYTE";
	case 0x14: return "GL_DEPTH_COMPONENT16_ARB_SGIX GL_DEPTH_COMPONENT GL_UNSIGNED_SHORT";
	case 0x16: return "GL_R16 GL_RED GL_UNSIGNED_SHORT";
	case 0x21: return "GL_BGRA GL_BGRA GL_UNSIGNED_BYTE";
	case 0x2A: return "GL_R8 GL_RED GL_UNSIGNED_BYTE";
	case 0x34: return "GL_RGB GL_RGB GL_UNSIGNED_SHORT_5_6_5";
	case 0x35: return "GL_RGBA GL_RGBA GL_UNSIGNED_SHORT_5_5_5_1";
	case 0x36: return "GL_RGBA GL_RGBA GL_UNSIGNED_SHORT_4_4_4_4";
	case 0x38: return "GL_R8I GL_RED_INTEGER GL_BYTE";
	case 0x39: return "GL_R16I GL_RED_INTEGER GL_SHORT";
	case 0x3A: return "GL_R32I GL_RED_INTEGER GL_INT";
	case 0x40: return "GL_RGB10_A2 GL_RGBA GL_UNSIGNED_INT_2_10_10_10_REV";
	case 0x41: return "GL_RGBA16 GL_RGBA GL_UNSIGNED_SHORT";
	case 0x49: return "GL_RGB GL_RGB GL_UNSIGNED_BYTE";
	case 0x4A: return "GL_DEPTH_COMPONENT GL_DEPTH_COMPONENT GL_UNSIGNED_INT";
	case 0x4E: return "GL_DEPTH_COMPONENT32F GL_DEPTH_COMPONENT GL_FLOAT";
	case 0x54: return "GL_LUMINANCE GL_LUMINANCE GL_UNSIGNED_BYTE";
	case 0x55: return "GL_LUMINANCE_ALPHA GL_LUMINANCE_ALPHA GL_UNSIGNED_BYTE";
	case 0x56: return "GL_ETC1_RGB8_OES GL_RGB GL_UNSIGNED_BYTE";
	case 0x57: return "GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG GL_RGBA GL_UNSIGNED_BYTE";
	case 0x58: return "GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG GL_RGBA GL_UNSIGNED_BYTE";
	case 0x59: return "GL_COMPRESSED_RGBA_S3TC_DXT1_EXT GL_RGBA GL_UNSIGNED_BYTE";
	case 0x5A: return "GL_COMPRESSED_RGBA_S3TC_DXT3_EXT GL_RGBA GL_UNSIGNED_BYTE";
	case 0x5B: return "GL_COMPRESSED_RGBA_S3TC_DXT5_EXT GL_RGBA GL_UNSIGNED_BYTE";
	case 0x67: return "GL_RGBA8UI GL_RGBA_INTEGER GL_UNSIGNED_BYTE";
	case 0x68: return "GL_RG8UI GL_RG_INTEGER GL_UNSIGNED_BYTE";
	case 0x69: return "GL_RG16F GL_RG GL_HALF_FLOAT";
	case 0x6A: return "GL_R16F GL_RED GL_HALF_FLOAT";
	case 0x6B: return "GL_R11F_G11F_B10F GL_RGB GL_UNSIGNED_INT_10F_11F_11F_REV";
	case 0x6C: return "GL_DEPTH32F_STENCIL8 GL_DEPTH_STENCIL GL_FLOAT_32_UNSIGNED_INT_24_8_REV";
	case 0x6F: return "GL_ETC1_RGB8_OES GL_RGB GL_UNSIGNED_BYTE";
	case 0x70: return "GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG GL_RGB GL_UNSIGNED_BYTE";
	case 0x71: return "GL_COMPRESSED_RGBA8_ETC2_EAC GL_RGBA GL_UNSIGNED_BYTE";
	case 0x72: return "GL_R8 GL_RED GL_UNSIGNED_BYTE";
	case 0x73: return "GL_RG8 GL_RG GL_UNSIGNED_BYTE";
	case 0x7A: return "GL_COMPRESSED_R11_EAC GL_RED GL_UNSIGNED_BYTE";
	case 0x7B: return "GL_COMPRESSED_RG11_EAC GL_RG GL_UNSIGNED_BYTE";
	case 0x7C: return "GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 GL_RGBA GL_UNSIGNED_BYTE";
	case 0x7D: return "ASTC_FORMAT";
	case 0x7E: return "ASTC_FORMAT";
	default:   return "Unknown format";
		break;
	}
}

std::string getiOSFormatStr(uint8_t format)
{
	switch (format)
	{
	case 0x00: return "GL_RGBA GL_RGBA GL_UNSIGNED_BYTE";
	case 0x01: return "GL_RGBA GL_BGRA GL_UNSIGNED_BYTE";
	case 0x02: return "GL_R32F GL_RED GL_FLOAT";
	case 0x03: return "GL_RGBA16F GL_RGBA 36193";
	case 0x04: return "GL_RGBA32F GL_RGBA GL_FLOAT";
	case 0x05: return "GL_DEPTH_STENCIL GL_DEPTH_STENCIL GL_UNSIGNED_INT_24_8";
	case 0x06: return "GL_COMPRESSED_RGBA_S3TC_DXT1_EXT GL_RGBA GL_UNSIGNED_BYTE";
	case 0x07: return "GL_COMPRESSED_RGBA_S3TC_DXT3_EXT GL_RGBA GL_UNSIGNED_BYTE";
	case 0x08: return "GL_COMPRESSED_RGBA_S3TC_DXT5_EXT GL_RGBA GL_UNSIGNED_BYTE";
	case 0x0F: return "GL_ALPHA GL_ALPHA GL_UNSIGNED_BYTE";
	case 0x14: return "GL_DEPTH_COMPONENT GL_DEPTH_COMPONENT GL_UNSIGNED_SHORT";
	case 0x16: return "GL_R16 GL_RED GL_UNSIGNED_SHORT";
	case 0x21: return "GL_RGBA GL_BGRA GL_UNSIGNED_BYTE";
	case 0x2A: return "GL_R8 GL_RED GL_UNSIGNED_BYTE";
	case 0x34: return "GL_RGB GL_RGB GL_UNSIGNED_SHORT_5_6_5";
	case 0x35: return "GL_RGBA GL_RGBA GL_UNSIGNED_SHORT_5_5_5_1";
	case 0x36: return "GL_RGBA GL_RGBA GL_UNSIGNED_SHORT_4_4_4_4";
	case 0x38: return "GL_R8I GL_RED_INTEGER GL_BYTE";
	case 0x39: return "GL_R16I GL_RED_INTEGER GL_SHORT";
	case 0x3A: return "GL_R32I GL_RED_INTEGER GL_INT";
	case 0x40: return "GL_RGB10_A2 GL_RGBA GL_UNSIGNED_INT_2_10_10_10_REV";
	case 0x41: return "GL_RGBA16 GL_RGBA GL_UNSIGNED_SHORT";
	case 0x49: return "GL_RGB GL_RGB GL_UNSIGNED_BYTE";
	case 0x4A: return "GL_DEPTH_COMPONENT GL_DEPTH_COMPONENT GL_UNSIGNED_INT";
	case 0x4E: return "GL_DEPTH_COMPONENT32F GL_DEPTH_COMPONENT GL_FLOAT";
	case 0x54: return "GL_LUMINANCE GL_LUMINANCE GL_UNSIGNED_BYTE";
	case 0x55: return "GL_LUMINANCE_ALPHA GL_LUMINANCE_ALPHA GL_UNSIGNED_BYTE";
	case 0x56: return "GL_ETC1_RGB8_OES GL_RGB GL_UNSIGNED_BYTE";
	case 0x57: return "GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG GL_RGBA GL_UNSIGNED_BYTE";
	case 0x58: return "GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG GL_RGBA GL_UNSIGNED_BYTE";
	case 0x59: return "GL_COMPRESSED_RGBA_S3TC_DXT1_EXT GL_RGBA GL_UNSIGNED_BYTE";
	case 0x5A: return "GL_COMPRESSED_RGBA_S3TC_DXT3_EXT GL_RGBA GL_UNSIGNED_BYTE";
	case 0x5B: return "GL_COMPRESSED_RGBA_S3TC_DXT5_EXT GL_RGBA GL_UNSIGNED_BYTE";
	case 0x67: return "GL_RGBA8UI GL_RGBA_INTEGER GL_UNSIGNED_BYTE";
	case 0x68: return "GL_RG8UI GL_RG_INTEGER GL_UNSIGNED_BYTE";
	case 0x69: return "GL_RG16F GL_RG 36193";
	case 0x6A: return "GL_R16F GL_RED 36193";
	case 0x6B: return "GL_R11F_G11F_B10F GL_RGB GL_UNSIGNED_INT_10F_11F_11F_REV";
	case 0x6C: return "GL_DEPTH32F_STENCIL8 GL_DEPTH_COMPONENT GL_FLOAT_32_UNSIGNED_INT_24_8_REV";
	case 0x6F: return "GL_ETC1_RGB8_OES GL_RGB GL_UNSIGNED_BYTE";
	case 0x70: return "GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG GL_RGB GL_UNSIGNED_BYTE";
	case 0x71: return "GL_COMPRESSED_RGBA8_ETC2_EAC GL_RGBA GL_UNSIGNED_BYTE";
	case 0x72: return "GL_R8 GL_RED GL_UNSIGNED_BYTE";
	case 0x73: return "GL_RG8 GL_RG GL_UNSIGNED_BYTE";
	case 0x7D: return "ASTC_FORMAT";
	case 0x7E: return "ASTC_FORMAT";
	default:   return "Unknown format";
		break;
	}
}

// unsure about this, pulled from lib
int getWiiUTileMode(uint8_t format)
{
	switch (format)
	{
	case 0x01:
	case 0x03:
	case 0x14:
	case 0x16:
	case 0x19:
	case 0x1a:
	case 0x21:
	case 0x23:
	case 0x34:
	case 0x36:
	case 0x39:
	case 0x3a:
	case 0x49:
	case 0x4a:
	case 0x4c:
	case 0x4e:
	case 0x50:
	case 0x52:
	case 0x54:
	case 0x55:
	case 0x56:
	case 0x57:
	case 0x58:
	case 0x59:
	case 0x5a:
	case 0x5b:
	case 0x5c:
	case 0x5d:
	case 0x5e:
	case 0x5f:
	case 0x69:
	case 0x6a:
	case 0x6c:
	case 0x6e:
	case 0x70:
	case 0x72:
	case 0x74:
	case 0x75:
	case 0x76:
	case 0x77:
	case 0x78:
	case 0x79:
	case 0x7a:
	case 0x7b:
	case 0x7c:
	case 0x7d:
	case 0x7e:
	case 0x7f:
		return 1; // GX2_TILE_MODE_LINEAR_ALIGNED
		break;
	default:  
		return 0; // GX2_TILE_MODE_DEFAULT
		break;
	}
}

int getNWiiUFormatValue(uint8_t format, uint8_t KTGL_GD_COLOR_SPACE)
{
	switch (format)
	{
	case 0x00:
	case 0x01:
	case 0x09:
	case 0x0A:
		return KTGL_GD_COLOR_SPACE ? 0x41A : 0x1A;  // GX2_SURFACE_FORMAT_UNORM_SRGB_R8_G8_B8_A8 // GX2_SURFACE_FORMAT_UNORM_R8_G8_B8_A8
	case 0x02:
	case 0x0B:
	case 0x4E:
	case 0x4F:  
		return 0x80E; // GX2_SURFACE_FORMAT_FLOAT_R32	
	case 0x03: 
	case 0x0C: 
		return 0x820; // TC_R16_G16_B16_A16_FLOAT
	case 0x04:
	case 0x0D:   
		return 0x823; // GX2_SURFACE_FORMAT_FLOAT_R32_G32_B32_A32 
	case 0x05:
	case 0x13:  
		return 0x11;  // GX2_SURFACE_FORMAT_UNORM_R24_X8 
	case 0x0F: 
	case 0x18: 
	case 0x2A:  
		return 0x1;   // GX2_SURFACE_FORMAT_UNORM_R8
	case 0x14:
	case 0x15:
	case 0x16:
	case 0x17:
		return 0x5;   // GX2_SURFACE_FORMAT_UNORM_R1
	case 0x1F:
	case 0x20:  
		return 0x811; // GX2_SURFACE_FORMAT_FLOAT_D24_S8 
	case 0x34:
	case 0x3B:  
		return 0x8;   // GX2_SURFACE_FORMAT_UNORM_R5_G6_B5
	case 0x35:
	case 0x3C:  
		return 0xA;   // GX2_SURFACE_FORMAT_UNORM_R5_G5_B5_A1
	case 0x36: 
	case 0x3D:  
		return 0xB;   // GX2_SURFACE_FORMAT_UNORM_R4_G4_B4_A4
	case 0x40: 
	case 0x42:  
		return 0x19;  // GX2_SURFACE_FORMAT_UNORM_R10_G10_B10_A2
	case 0x41: 
	case 0x43:  
		return 0x1F;  // GX2_SURFACE_FORMAT_UNORM_R16_G16_B16_A16
	case 0x46: 
		return 0x7;   // GX2_SURFACE_FORMAT_UNORM_R8_G8
	case 0x59: 
	case 0x60: 
		return KTGL_GD_COLOR_SPACE ? 0x431 : 0x31;  // GX2_SURFACE_FORMAT_UNORM_SRGB_BC1 / GX2_SURFACE_FORMAT_UNORM_BC1
	case 0x61: 
	case 0x5A:  
		return KTGL_GD_COLOR_SPACE ? 0x432 : 0x32;  // GX2_SURFACE_FORMAT_UNORM_SRGB_BC2 / GX2_SURFACE_FORMAT_UNORM_BC2
	case 0x62: 
	case 0x5B: 
		return KTGL_GD_COLOR_SPACE ? 0x433 : 0x33;  // GX2_SURFACE_FORMAT_UNORM_SRGB_BC3 / GX2_SURFACE_FORMAT_UNORM_BC3
	case 0x5C: 
	case 0x63: 
		return KTGL_GD_COLOR_SPACE ? 0x434 : 0x34;  // GX2_SURFACE_FORMAT_UNORM_SRGB_BC4 / GX2_SURFACE_FORMAT_UNORM_BC4
	case 0x5D: 
	case 0x64:  
		return KTGL_GD_COLOR_SPACE ? 0x235 : 0x35;  // GX2_SURFACE_FORMAT_UNORM_SRGB_BC5 / GX2_SURFACE_FORMAT_UNORM_BC5
	default:   
		return 0x0;
	}
}

std::string getNWiiUFormatStr(uint8_t format)
{
	switch (format)
	{
	case 0x00: return "GX2_SURFACE_FORMAT_TCS_R8_G8_B8_A8_UNORM GX2_BLEND_MODE_INV_SRC_COLOR CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x01: return "GX2_SURFACE_FORMAT_TCS_R8_G8_B8_A8_UNORM GX2_BLEND_MODE_ZERO CHANNELB CHANNELB CHANNELB CHANNELG CHANNELR CHANNELA";
	case 0x02: return "GX2_SURFACE_FORMAT_TCD_R32_FLOAT GX2_BLEND_MODE_INV_SRC_ALPHA CHANNELR CHANNELR CHANNELR ALWAYS0 ALWAYS0 CHANNELR";
	case 0x03: return "GX2_SURFACE_FORMAT_TC_R16_G16_B16_A16_FLOAT GX2_BLEND_MODE_ONE CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELA";
	case 0x04: return "GX2_SURFACE_FORMAT_TC_R32_G32_B32_A32_FLOAT GX2_BLEND_MODE_ONE CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELR";
	case 0x05: return "GX2_SURFACE_FORMAT_D_D24_S8_UNORM GX2_BLEND_MODE_SRC_ALPHA CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x09: return "GX2_SURFACE_FORMAT_TCS_R8_G8_B8_A8_UNORM GX2_BLEND_MODE_INV_SRC_COLOR CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELA";
	case 0x0A: return "GX2_SURFACE_FORMAT_TCS_R8_G8_B8_A8_UNORM GX2_BLEND_MODE_ZERO CHANNELB CHANNELB CHANNELB CHANNELG CHANNELR CHANNELR";
	case 0x0B: return "GX2_SURFACE_FORMAT_TCD_R32_FLOAT GX2_BLEND_MODE_INV_SRC_ALPHA CHANNELR CHANNELR CHANNELR ALWAYS0 ALWAYS0 ALWAYS1";
	case 0x0C: return "GX2_SURFACE_FORMAT_TC_R16_G16_B16_A16_FLOAT GX2_BLEND_MODE_ONE CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELR";
	case 0x0D: return "GX2_SURFACE_FORMAT_TC_R32_G32_B32_A32_FLOAT GX2_BLEND_MODE_ONE CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELA";
	case 0x0F: return "GX2_SURFACE_FORMAT_TC_R8_UNORM GX2_BLEND_MODE_ONE ALWAYS0 ALWAYS0 ALWAYS0 ALWAYS0 ALWAYS0 CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x13: return "GX2_SURFACE_FORMAT_D_D24_S8_UNORM GX2_BLEND_MODE_SRC_ALPHA CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x14: return "GX2_SURFACE_FORMAT_TCD_R16_UNORM GX2_BLEND_MODE_INV_SRC_ALPHA CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x15: return "GX2_SURFACE_FORMAT_TCD_R16_UNORM GX2_BLEND_MODE_INV_SRC_ALPHA CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x16: return "GX2_SURFACE_FORMAT_TCD_R16_UNORM GX2_BLEND_MODE_INV_SRC_ALPHA CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR";
	case 0x17: return "GX2_SURFACE_FORMAT_TCD_R16_UNORM GX2_BLEND_MODE_INV_SRC_ALPHA CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR";
	case 0x18: return "GX2_SURFACE_FORMAT_TC_R8_UNORM GX2_BLEND_MODE_ONE ALWAYS0 ALWAYS0 ALWAYS0 ALWAYS0 ALWAYS0 CHANNELR";
	case 0x1F: return "GX2_SURFACE_FORMAT_D_D24_S8_FLOAT GX2_BLEND_MODE_SRC_ALPHA CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x20: return "GX2_SURFACE_FORMAT_D_D24_S8_FLOAT GX2_BLEND_MODE_SRC_ALPHA CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x2A: return "GX2_SURFACE_FORMAT_TC_R8_UNORM GX2_BLEND_MODE_ONE CHANNELR CHANNELR CHANNELR ALWAYS0 ALWAYS0 CHANNELR";
	case 0x34: return "GX2_SURFACE_FORMAT_TCS_R5_G6_B5_UNORM GX2_BLEND_MODE_INV_SRC_COLOR CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x35: return "GX2_SURFACE_FORMAT_TC_R5_G5_B5_A1_UNORM GX2_BLEND_MODE_ONE CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELA (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x36: return "GX2_SURFACE_FORMAT_TC_R4_G4_B4_A4_UNORM GX2_BLEND_MODE_ONE CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELR";
	case 0x3B: return "GX2_SURFACE_FORMAT_TCS_R5_G6_B5_UNORM GX2_BLEND_MODE_INV_SRC_COLOR CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB ALWAYS1";
	case 0x3C: return "GX2_SURFACE_FORMAT_TC_R5_G5_B5_A1_UNORM GX2_BLEND_MODE_ONE CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELR";
	case 0x3D: return "GX2_SURFACE_FORMAT_TC_R4_G4_B4_A4_UNORM GX2_BLEND_MODE_ONE CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELA";
	case 0x40: return "GX2_SURFACE_FORMAT_TCS_R10_G10_B10_A2_UNORM GX2_BLEND_MODE_INV_SRC_COLOR CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x41: return "GX2_SURFACE_FORMAT_TC_R16_G16_B16_A16_UNORM GX2_BLEND_MODE_ONE CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELA (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x42: return "GX2_SURFACE_FORMAT_TCS_R10_G10_B10_A2_UNORM GX2_BLEND_MODE_INV_SRC_COLOR CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x43: return "GX2_SURFACE_FORMAT_TC_R16_G16_B16_A16_UNORM GX2_BLEND_MODE_ONE CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELA (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x46: return "GX2_SURFACE_FORMAT_TC_R8_G8_UNORM GX2_BLEND_MODE_ONE CHANNELR CHANNELR CHANNELR CHANNELG ALWAYS0 CHANNELR";
	case 0x4E: return "GX2_SURFACE_FORMAT_TCD_R32_FLOAT GX2_BLEND_MODE_INV_SRC_ALPHA CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x4F: return "GX2_SURFACE_FORMAT_TCD_R32_FLOAT GX2_BLEND_MODE_INV_SRC_ALPHA CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x59: return "GX2_SURFACE_FORMAT_T_BC1_UNORM GX2_BLEND_MODE_ZERO CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELA (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x5A: return "GX2_SURFACE_FORMAT_T_BC2_UNORM GX2_BLEND_MODE_ZERO CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x5B: return "GX2_SURFACE_FORMAT_T_BC3_UNORM GX2_BLEND_MODE_ZERO CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELA (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x5C: return "GX2_SURFACE_FORMAT_T_BC4_UNORM GX2_BLEND_MODE_ZERO CHANNELR CHANNELR CHANNELR ALWAYS0 ALWAYS0 CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x5D: return "GX2_SURFACE_FORMAT_T_BC5_UNORM GX2_BLEND_MODE_ZERO CHANNELR CHANNELR CHANNELR CHANNELG ALWAYS0 ALWAYS1 (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x60: return "GX2_SURFACE_FORMAT_T_BC1_UNORM GX2_BLEND_MODE_ZERO CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x61: return "GX2_SURFACE_FORMAT_T_BC2_UNORM GX2_BLEND_MODE_ZERO CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELA (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x62: return "GX2_SURFACE_FORMAT_T_BC3_UNORM GX2_BLEND_MODE_ZERO CHANNELR CHANNELR CHANNELR CHANNELG CHANNELB CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x63: return "GX2_SURFACE_FORMAT_T_BC4_UNORM GX2_BLEND_MODE_ZERO CHANNELR CHANNELR CHANNELR ALWAYS0 ALWAYS0 ALWAYS1 (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x64: return "GX2_SURFACE_FORMAT_T_BC5_UNORM GX2_BLEND_MODE_ZERO CHANNELR CHANNELR CHANNELR CHANNELG ALWAYS0 CHANNELR (GX2_SURFACE_USE_DEPTH_BUFFER)";
	case 0x7D: return "ASTC_FORMAT";
	case 0x7E: return "ASTC_FORMAT";
	default:   return "Unknown format";
	}
}

std::string getWinMacFormatStr(uint8_t format)
{
	switch (format)
	{
	case 0x00: return "DXGI_FORMAT_R8G8B8A8_TYPELESS DXGI_FORMAT_R8G8B8A8_UNORM DXGI_FORMAT_R8G8B8A8_UNORM_SRGB DXGI_FORMAT_R8G8B8A8_UNORM DXGI_FORMAT_R8G8B8A8_UNORM_SRGB";
	case 0x01: return "DXGI_FORMAT_B8G8R8A8_TYPELESS DXGI_FORMAT_B8G8R8A8_UNORM DXGI_FORMAT_B8G8R8A8_UNORM_SRGB DXGI_FORMAT_B8G8R8A8_UNORM DXGI_FORMAT_B8G8R8A8_UNORM_SRGB";
	case 0x02: return "DXGI_FORMAT_R32_TYPELESS DXGI_FORMAT_R32_FLOAT DXGI_FORMAT_R32_FLOAT";
	case 0x03: return "DXGI_FORMAT_R16G16B16A16_TYPELESS DXGI_FORMAT_R16G16B16A16_FLOAT DXGI_FORMAT_R16G16B16A16_FLOAT";
	case 0x04: return "DXGI_FORMAT_R32G32B32A32_TYPELESS DXGI_FORMAT_R32G32B32A32_FLOAT DXGI_FORMAT_R32G32B32A32_FLOAT";
	case 0x05: return "DXGI_FORMAT_R24G8_TYPELESS DXGI_FORMAT_R24_UNORM_X8_TYPELESS DXGI_FORMAT_D24_UNORM_S8_UINT DXGI_FORMAT_X24_TYPELESS_G8_UINT";
	case 0x06: return "DXGI_FORMAT_BC1_TYPELESS DXGI_FORMAT_BC1_UNORM DXGI_FORMAT_BC1_UNORM_SRGB DXGI_FORMAT_BC1_UNORM DXGI_FORMAT_BC1_UNORM_SRGB";
	case 0x07: return "DXGI_FORMAT_BC2_TYPELESS DXGI_FORMAT_BC2_UNORM DXGI_FORMAT_BC2_UNORM_SRGB DXGI_FORMAT_BC2_UNORM DXGI_FORMAT_BC2_UNORM_SRGB";
	case 0x08: return "DXGI_FORMAT_BC3_TYPELESS DXGI_FORMAT_BC3_UNORM DXGI_FORMAT_BC3_UNORM_SRGB DXGI_FORMAT_BC3_UNORM DXGI_FORMAT_BC3_UNORM_SRGB";
	case 0x09: return "DXGI_FORMAT_R8G8B8A8_TYPELESS DXGI_FORMAT_R8G8B8A8_UNORM DXGI_FORMAT_R8G8B8A8_UNORM_SRGB DXGI_FORMAT_R8G8B8A8_UNORM DXGI_FORMAT_R8G8B8A8_UNORM_SRGB";
	case 0x0A: return "DXGI_FORMAT_B8G8R8A8_TYPELESS DXGI_FORMAT_B8G8R8A8_UNORM DXGI_FORMAT_B8G8R8A8_UNORM_SRGB DXGI_FORMAT_B8G8R8A8_UNORM DXGI_FORMAT_B8G8R8A8_UNORM_SRGB";
	case 0x0B: return "DXGI_FORMAT_R32_TYPELESS DXGI_FORMAT_R32_FLOAT DXGI_FORMAT_R32_FLOAT";
	case 0x0C: return "DXGI_FORMAT_R16G16B16A16_TYPELESS DXGI_FORMAT_R16G16B16A16_FLOAT DXGI_FORMAT_R16G16B16A16_FLOAT";
	case 0x0D: return "DXGI_FORMAT_R32G32B32A32_TYPELESS DXGI_FORMAT_R32G32B32A32_FLOAT DXGI_FORMAT_R32G32B32A32_FLOAT";
	case 0x0F: return "DXGI_FORMAT_A8_UNORM DXGI_FORMAT_A8_UNORM DXGI_FORMAT_A8_UNORM";
	case 0x10: return "DXGI_FORMAT_BC1_TYPELESS DXGI_FORMAT_BC1_UNORM DXGI_FORMAT_BC1_UNORM_SRGB DXGI_FORMAT_BC1_UNORM DXGI_FORMAT_BC1_UNORM_SRGB";
	case 0x11: return "DXGI_FORMAT_BC2_TYPELESS DXGI_FORMAT_BC2_UNORM DXGI_FORMAT_BC2_UNORM_SRGB DXGI_FORMAT_BC2_UNORM DXGI_FORMAT_BC2_UNORM_SRGB";
	case 0x12: return "DXGI_FORMAT_BC3_TYPELESS DXGI_FORMAT_BC3_UNORM DXGI_FORMAT_BC3_UNORM_SRGB DXGI_FORMAT_BC3_UNORM DXGI_FORMAT_BC3_UNORM_SRGB";
	case 0x13: return "DXGI_FORMAT_R24G8_TYPELESS DXGI_FORMAT_R24_UNORM_X8_TYPELESS DXGI_FORMAT_D24_UNORM_S8_UINT DXGI_FORMAT_X24_TYPELESS_G8_UINT";
	case 0x14: return "DXGI_FORMAT_R16_TYPELESS DXGI_FORMAT_R16_UNORM DXGI_FORMAT_D16_UNORM";
	case 0x15: return "DXGI_FORMAT_R16_TYPELESS DXGI_FORMAT_R16_UNORM DXGI_FORMAT_D16_UNORM";
	case 0x16: return "DXGI_FORMAT_R16_TYPELESS DXGI_FORMAT_R16_UNORM DXGI_FORMAT_R16_UNORM";
	case 0x17: return "DXGI_FORMAT_R16_TYPELESS DXGI_FORMAT_R16_UNORM DXGI_FORMAT_R16_UNORM";
	case 0x18: return "DXGI_FORMAT_A8_UNORM DXGI_FORMAT_A8_UNORM DXGI_FORMAT_A8_UNORM";
	case 0x19: return "DXGI_FORMAT_B5G6R5_UNORM DXGI_FORMAT_B5G6R5_UNORM DXGI_FORMAT_B5G6R5_UNORM";
	case 0x1A: return "DXGI_FORMAT_B5G5R5A1_UNORM DXGI_FORMAT_B5G5R5A1_UNORM DXGI_FORMAT_B5G5R5A1_UNORM";
	case 0x1C: return "DXGI_FORMAT_B5G6R5_UNORM DXGI_FORMAT_B5G6R5_UNORM DXGI_FORMAT_B5G6R5_UNORM";
	case 0x1D: return "DXGI_FORMAT_B5G5R5A1_UNORM DXGI_FORMAT_B5G5R5A1_UNORM DXGI_FORMAT_B5G5R5A1_UNORM";
	case 0x21: return "DXGI_FORMAT_B8G8R8X8_TYPELESS DXGI_FORMAT_B8G8R8X8_UNORM DXGI_FORMAT_B8G8R8X8_UNORM_SRGB DXGI_FORMAT_B8G8R8X8_UNORM DXGI_FORMAT_B8G8R8X8_UNORM_SRGB";
	case 0x22: return "DXGI_FORMAT_B8G8R8X8_TYPELESS DXGI_FORMAT_B8G8R8X8_UNORM DXGI_FORMAT_B8G8R8X8_UNORM_SRGB DXGI_FORMAT_B8G8R8X8_UNORM DXGI_FORMAT_B8G8R8X8_UNORM_SRGB";
	case 0x23: return "DXGI_FORMAT_R16G16_TYPELESS DXGI_FORMAT_R16G16_UNORM DXGI_FORMAT_R16G16_UNORM";
	case 0x24: return "DXGI_FORMAT_R16G16_TYPELESS DXGI_FORMAT_R16G16_UNORM DXGI_FORMAT_R16G16_UNORM";
	case 0x25: return "DXGI_FORMAT_BC6H_TYPELESS DXGI_FORMAT_BC6H_SF16 DXGI_FORMAT_BC6H_SF16";
	case 0x2A: return "DXGI_FORMAT_R8_UNORM DXGI_FORMAT_R8_UNORM DXGI_FORMAT_R8_UNORM";
	case 0x2B: return "DXGI_FORMAT_BC6H_TYPELESS DXGI_FORMAT_BC6H_SF16 DXGI_FORMAT_BC6H_SF16";
	case 0x40: return "DXGI_FORMAT_R10G10B10A2_UNORM DXGI_FORMAT_R10G10B10A2_UNORM DXGI_FORMAT_R10G10B10A2_UNORM";
	case 0x41: return "DXGI_FORMAT_R16G16B16A16_TYPELESS DXGI_FORMAT_R16G16B16A16_UNORM DXGI_FORMAT_R16G16B16A16_UNORM";
	case 0x42: return "DXGI_FORMAT_R10G10B10A2_UNORM DXGI_FORMAT_R10G10B10A2_UNORM DXGI_FORMAT_R10G10B10A2_UNORM";
	case 0x43: return "DXGI_FORMAT_R16G16B16A16_TYPELESS DXGI_FORMAT_R16G16B16A16_UNORM DXGI_FORMAT_R16G16B16A16_UNORM";
	case 0x46: return "DXGI_FORMAT_R8G8_UNORM DXGI_FORMAT_R8G8_UNORM DXGI_FORMAT_R8G8_UNORM";
	case 0x4C: return "DXGI_FORMAT_R32G32_TYPELESS DXGI_FORMAT_R32G32_FLOAT DXGI_FORMAT_R32G32_FLOAT";
	case 0x4D: return "DXGI_FORMAT_R32G32_TYPELESS DXGI_FORMAT_R32G32_FLOAT DXGI_FORMAT_R32G32_FLOAT";
	case 0x4E: return "DXGI_FORMAT_R32_TYPELESS DXGI_FORMAT_R32_FLOAT DXGI_FORMAT_D32_FLOAT";
	case 0x4F: return "DXGI_FORMAT_R32_TYPELESS DXGI_FORMAT_R32_FLOAT DXGI_FORMAT_D32_FLOAT";
	case 0x59: return "DXGI_FORMAT_BC1_TYPELESS DXGI_FORMAT_BC1_UNORM DXGI_FORMAT_BC1_UNORM_SRGB DXGI_FORMAT_BC1_UNORM DXGI_FORMAT_BC1_UNORM_SRGB";
	case 0x5A: return "DXGI_FORMAT_BC2_TYPELESS DXGI_FORMAT_BC2_UNORM DXGI_FORMAT_BC2_UNORM_SRGB DXGI_FORMAT_BC2_UNORM DXGI_FORMAT_BC2_UNORM_SRGB";
	case 0x5B: return "DXGI_FORMAT_BC3_TYPELESS DXGI_FORMAT_BC3_UNORM DXGI_FORMAT_BC3_UNORM_SRGB DXGI_FORMAT_BC3_UNORM DXGI_FORMAT_BC3_UNORM_SRGB";
	case 0x5C: return "DXGI_FORMAT_BC4_TYPELESS DXGI_FORMAT_BC4_UNORM DXGI_FORMAT_BC4_UNORM";
	case 0x5D: return "DXGI_FORMAT_BC5_TYPELESS DXGI_FORMAT_BC5_UNORM DXGI_FORMAT_BC5_UNORM";
	case 0x5E: return "DXGI_FORMAT_BC6H_TYPELESS DXGI_FORMAT_BC6H_UF16 DXGI_FORMAT_BC6H_UF16";
	case 0x5F: return "DXGI_FORMAT_BC7_TYPELESS DXGI_FORMAT_BC7_UNORM DXGI_FORMAT_BC7_UNORM_SRGB DXGI_FORMAT_BC7_UNORM DXGI_FORMAT_BC7_UNORM_SRGB";
	case 0x60: return "DXGI_FORMAT_BC1_TYPELESS DXGI_FORMAT_BC1_UNORM DXGI_FORMAT_BC1_UNORM_SRGB DXGI_FORMAT_BC1_UNORM DXGI_FORMAT_BC1_UNORM_SRGB";
	case 0x61: return "DXGI_FORMAT_BC2_TYPELESS DXGI_FORMAT_BC2_UNORM DXGI_FORMAT_BC2_UNORM_SRGB DXGI_FORMAT_BC2_UNORM DXGI_FORMAT_BC2_UNORM_SRGB";
	case 0x62: return "DXGI_FORMAT_BC3_TYPELESS DXGI_FORMAT_BC3_UNORM DXGI_FORMAT_BC3_UNORM_SRGB DXGI_FORMAT_BC3_UNORM DXGI_FORMAT_BC3_UNORM_SRGB";
	case 0x63: return "DXGI_FORMAT_BC4_TYPELESS DXGI_FORMAT_BC4_UNORM DXGI_FORMAT_BC4_UNORM";
	case 0x64: return "DXGI_FORMAT_BC5_TYPELESS DXGI_FORMAT_BC5_UNORM DXGI_FORMAT_BC5_UNORM";
	case 0x65: return "DXGI_FORMAT_BC6H_TYPELESS DXGI_FORMAT_BC6H_UF16 DXGI_FORMAT_BC6H_UF16";
	case 0x66: return "DXGI_FORMAT_BC7_TYPELESS DXGI_FORMAT_BC7_UNORM DXGI_FORMAT_BC7_UNORM_SRGB DXGI_FORMAT_BC7_UNORM DXGI_FORMAT_BC7_UNORM_SRGB";
	case 0x67: return "DXGI_FORMAT_R8G8B8A8_TYPELESS DXGI_FORMAT_R8G8B8A8_UINT DXGI_FORMAT_R8G8B8A8_UINT";
	case 0x68: return "DXGI_FORMAT_R8G8_TYPELESS DXGI_FORMAT_R8G8_UINT DXGI_FORMAT_R8G8_UINT";
	case 0x69: return "DXGI_FORMAT_R16G16_TYPELESS DXGI_FORMAT_R16G16_FLOAT DXGI_FORMAT_R16G16_FLOAT";
	case 0x6A: return "DXGI_FORMAT_R16_TYPELESS DXGI_FORMAT_R16_FLOAT DXGI_FORMAT_R16_FLOAT";
	case 0x6B: return "DXGI_FORMAT_R11G11B10_FLOAT DXGI_FORMAT_R11G11B10_FLOAT DXGI_FORMAT_R11G11B10_FLOAT";
	case 0x6C: return "DXGI_FORMAT_R32G8X24_TYPELESS DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS DXGI_FORMAT_D32_FLOAT_S8X24_UINT DXGI_FORMAT_X32_TYPELESS_G8X24_UINT";
	case 0x6D: return "DXGI_FORMAT_R32G8X24_TYPELESS DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS DXGI_FORMAT_D32_FLOAT_S8X24_UINT DXGI_FORMAT_X32_TYPELESS_G8X24_UINT";
	case 0x72: return "DXGI_FORMAT_R8_UNORM DXGI_FORMAT_R8_UNORM DXGI_FORMAT_R8_UNORM";
	case 0x73: return "DXGI_FORMAT_R8G8_UNORM DXGI_FORMAT_R8G8_UNORM DXGI_FORMAT_R8G8_UNORM";
	case 0x74: return "DXGI_FORMAT_R8G8B8A8_TYPELESS DXGI_FORMAT_R8G8B8A8_UINT DXGI_FORMAT_R8G8B8A8_UINT";
	case 0x75: return "DXGI_FORMAT_R8G8_TYPELESS DXGI_FORMAT_R8G8_UINT DXGI_FORMAT_R8G8_UINT";
	case 0x76: return "DXGI_FORMAT_R16G16_TYPELESS DXGI_FORMAT_R16G16_FLOAT DXGI_FORMAT_R16G16_FLOAT";
	case 0x77: return "DXGI_FORMAT_R16_TYPELESS DXGI_FORMAT_R16_FLOAT DXGI_FORMAT_R16_FLOAT";
	case 0x78: return "DXGI_FORMAT_R11G11B10_FLOAT DXGI_FORMAT_R11G11B10_FLOAT DXGI_FORMAT_R11G11B10_FLOAT";
	case 0x7D: return "ASTC_FORMAT";
	case 0x7E: return "ASTC_FORMAT";
	default:   return "Unknown format";
		break;
	}
}

std::string getPS4FormatStr(uint8_t format)
{
	switch (format)
	{                 // RGBA order
	case 0x00: return "kSurfaceFormat8_8_8_8 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x01: return "SCE_VIDEO_OUT_PIXEL_FORMAT_B8_G8_R8_A8_SRGB kSurfaceFormat8_8_8_8 kTextureChannelTypeUNorm CHANNELS: 4 Blue Green Red Alpha";
	case 0x02: return "kSurfaceFormat32 kTextureChannelTypeFloat CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x03: return "kSurfaceFormat16_16_16_16 kTextureChannelTypeFloat CHANNELS: 4 Red Green Blue Alpha";
	case 0x04: return "kSurfaceFormat32_32_32_32 kTextureChannelTypeFloat CHANNELS: 4 Red Green Blue Alpha";
	case 0x06: return "kSurfaceFormatBc1 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x07: return "kSurfaceFormatBc2 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x08: return "kSurfaceFormatBc3 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x09: return "kSurfaceFormat8_8_8_8 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x0A: return "SCE_VIDEO_OUT_PIXEL_FORMAT_B8_G8_R8_A8_SRGB kSurfaceFormat8_8_8_8 kTextureChannelTypeUNorm CHANNELS: 4 Blue Green Red Alpha";
	case 0x0B: return "kSurfaceFormat32 kTextureChannelTypeFloat CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x0C: return "SCE_VIDEO_OUT_PIXEL_FORMAT_B16_G16_R16_A16_FLOAT kSurfaceFormat16_16_16_16 kTextureChannelTypeFloat CHANNELS: 4 Red Green Blue Alpha";
	case 0x0D: return "kSurfaceFormat32_32_32_32 kTextureChannelTypeFloat CHANNELS: 4 Red Green Blue Alpha";
	case 0x0E: return "kSurfaceFormat10_10_10_2 kTextureChannelTypeFloat CHANNELS: 4 Red Green Blue Alpha";
	case 0x0F: return "kSurfaceFormat8 kTextureChannelTypeUNorm CHANNELS: 1 Constant0 Constant0 Constant0 Red";
	case 0x10: return "kSurfaceFormatBc1 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x11: return "kSurfaceFormatBc2 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x12: return "kSurfaceFormatBc3 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x14: return "kSurfaceFormat16 kTextureChannelTypeUNorm CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x15: return "kSurfaceFormat16 kTextureChannelTypeUNorm CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x16: return "kSurfaceFormat16 kTextureChannelTypeUNorm CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x17: return "kSurfaceFormat16 kTextureChannelTypeUNorm CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x18: return "kSurfaceFormat8 kTextureChannelTypeUNorm CHANNELS: 1 Constant0 Constant0 Constant0 Red";
	case 0x19: return "kSurfaceFormat5_6_5 kTextureChannelTypeUNorm CHANNELS: 3 Blue Green Red Constant1";
	case 0x1A: return "kSurfaceFormat1_5_5_5 kTextureChannelTypeUNorm CHANNELS: 4 Blue Green Red Alpha";
	case 0x1B: return "kSurfaceFormat4_4_4_4 kTextureChannelTypeUNorm CHANNELS: 4 Blue Green Red Alpha";
	case 0x1C: return "kSurfaceFormat5_6_5 kTextureChannelTypeUNorm CHANNELS: 3 Blue Green Red Constant1";
	case 0x1D: return "kSurfaceFormat1_5_5_5 kTextureChannelTypeUNorm CHANNELS: 4 Blue Green Red Alpha";
	case 0x1E: return "kSurfaceFormat4_4_4_4 kTextureChannelTypeUNorm CHANNELS: 4 Blue Green Red Alpha";
	case 0x21: return "SCE_VIDEO_OUT_PIXEL_FORMAT_B8_G8_R8_A8_SRGB kSurfaceFormat8_8_8_8 kTextureChannelTypeUNorm CHANNELS: 4 Blue Green Red Alpha";
	case 0x22: return "SCE_VIDEO_OUT_PIXEL_FORMAT_B8_G8_R8_A8_SRGB kSurfaceFormat8_8_8_8 kTextureChannelTypeUNorm CHANNELS: 4 Blue Green Red Alpha";
	case 0x23: return "kSurfaceFormat16_16 kTextureChannelTypeUNorm CHANNELS: 2 Green Red Constant0 Constant1";
	case 0x24: return "kSurfaceFormat16_16 kTextureChannelTypeUNorm CHANNELS: 2 Green Red Constant0 Constant1";
	case 0x26: return "kSurfaceFormat8_8 kTextureChannelTypeUNorm CHANNELS: 2 Constant0 Green Red Constant1";
	case 0x27: return "kSurfaceFormat8_8 kTextureChannelTypeUNorm CHANNELS: 2 Red Constant0 Constant0 Green";
	case 0x28: return "kSurfaceFormat8 kTextureChannelTypeUNorm CHANNELS: 1 Constant0 Constant0 Red Constant1";
	case 0x29: return "kSurfaceFormat8 kTextureChannelTypeUNorm CHANNELS: 1 Constant0 Red Constant0 Constant1";
	case 0x2A: return "kSurfaceFormat8 kTextureChannelTypeUNorm CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x2C: return "kSurfaceFormat8 kTextureChannelTypeUNorm CHANNELS: 1 Red Red Red Constant1";
	case 0x2E: return "kSurfaceFormat8_8 kTextureChannelTypeUNorm CHANNELS: 2 Red Red Red Green";
	case 0x30: return "kSurfaceFormat8 kTextureChannelTypeUNorm CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x34: return "kSurfaceFormat5_6_5 kTextureChannelTypeUNorm CHANNELS: 3 Red Green Blue Constant1";
	case 0x35: return "kSurfaceFormat1_5_5_5 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x36: return "kSurfaceFormat4_4_4_4 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x3B: return "kSurfaceFormat5_6_5 kTextureChannelTypeUNorm CHANNELS: 3 Red Green Blue Constant1";
	case 0x3C: return "kSurfaceFormat5_5_5_1 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x3D: return "kSurfaceFormat4_4_4_4 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x40: return "SCE_VIDEO_OUT_PIXEL_FORMAT_B10_G10_R10_A2 kSurfaceFormat2_10_10_10 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x41: return "kSurfaceFormat16_16_16_16 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x42: return "SCE_VIDEO_OUT_PIXEL_FORMAT_B10_G10_R10_A2 kSurfaceFormat2_10_10_10 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x43: return "kSurfaceFormat16_16_16_16 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x46: return "kSurfaceFormat8_8 kTextureChannelTypeUNorm CHANNELS: 2 Red Green Constant0 Constant1";
	case 0x4C: return "kSurfaceFormat32_32 kTextureChannelTypeFloat CHANNELS: 2 Green Red Constant0 Constant1";
	case 0x4D: return "kSurfaceFormat32_32 kTextureChannelTypeFloat CHANNELS: 2 Green Red Constant0 Constant1";
	case 0x4E: return "kSurfaceFormat32 kTextureChannelTypeFloat CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x4F: return "kSurfaceFormat32 kTextureChannelTypeFloat CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x54: return "kSurfaceFormat8 kTextureChannelTypeUNorm CHANNELS: 1 Red Red Red Constant1";
	case 0x55: return "kSurfaceFormat8_8 kTextureChannelTypeUNorm CHANNELS: 2 Red Red Red Green";
	case 0x59: return "kSurfaceFormatBc1 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x5A: return "kSurfaceFormatBc2 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x5B: return "kSurfaceFormatBc3 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x5C: return "kSurfaceFormatBc4 kTextureChannelTypeUNorm CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x5D: return "kSurfaceFormatBc5 kTextureChannelTypeUNorm CHANNELS: 2 Red Green Constant0 Constant1";
	case 0x5E: return "kSurfaceFormatBc6 kTextureChannelTypeUNorm CHANNELS: 3 Red Green Blue Constant1";
	case 0x5F: return "kSurfaceFormatBc7 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x60: return "kSurfaceFormatBc1 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x61: return "kSurfaceFormatBc2 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x62: return "kSurfaceFormatBc3 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x63: return "kSurfaceFormatBc4 kTextureChannelTypeUNorm CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x64: return "kSurfaceFormatBc5 kTextureChannelTypeUNorm CHANNELS: 2 Red Green Constant0 Constant1";
	case 0x65: return "kSurfaceFormatBc6 kTextureChannelTypeUNorm CHANNELS: 3 Red Green Blue Constant1";
	case 0x66: return "kSurfaceFormatBc7 kTextureChannelTypeUNorm CHANNELS: 4 Red Green Blue Alpha";
	case 0x67: return "kSurfaceFormat8_8_8_8 kTextureChannelTypeUInt CHANNELS: 4 Red Green Blue Alpha";
	case 0x68: return "kSurfaceFormat8_8 kTextureChannelTypeUInt CHANNELS: 2 Red Green Constant0 Constant0";
	case 0x69: return "kSurfaceFormat16_16 kTextureChannelTypeFloat CHANNELS: 2 Red Green Constant0 Constant1";
	case 0x6A: return "kSurfaceFormat16 kTextureChannelTypeFloat CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x6B: return "kSurfaceFormat10_11_11 kTextureChannelTypeFloat CHANNELS: 3 Red Green Blue Constant1";
	case 0x6C: return "kSurfaceFormat32 kTextureChannelTypeFloat CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x6D: return "kSurfaceFormat32 kTextureChannelTypeFloat CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x6E: return "kSurfaceFormat16 kTextureChannelTypeUNorm CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x72: return "kSurfaceFormat8 kTextureChannelTypeUNorm CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x73: return "kSurfaceFormat8_8 kTextureChannelTypeUNorm CHANNELS: 2 Red Green Constant0 Constant1";
	case 0x74: return "kSurfaceFormat8_8_8_8 kTextureChannelTypeUInt CHANNELS: 4 Red Green Blue Alpha";
	case 0x75: return "kSurfaceFormat8_8 kTextureChannelTypeUInt CHANNELS: 2 Red Green Constant0 Constant0";
	case 0x76: return "kSurfaceFormat16_16 kTextureChannelTypeFloat CHANNELS: 2 Red Green Constant0 Constant1";
	case 0x77: return "kSurfaceFormat16 kTextureChannelTypeFloat CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x78: return "kSurfaceFormat10_11_11 kTextureChannelTypeFloat CHANNELS: 3 Red Green Blue Constant1";
	case 0x79: return "kSurfaceFormat16 kTextureChannelTypeUNorm CHANNELS: 1 Red Constant0 Constant0 Constant1";
	case 0x7D: return "ASTC_FORMAT";
	case 0x7E: return "ASTC_FORMAT";
	default:   return "Unknown format";
		break;
	}
}

std::string getNSwitchFormatStr(uint8_t format)
{
	switch (format)
	{
	case 0x00: return "R8_G8_B8_A8_Unorm R8_G8_B8_A8_Unorm R8_G8_B8_A8_UnormSrgb R8_G8_B8_A8_Unorm R8_G8_B8_A8_UnormSrgb";
	case 0x01: return "R8_G8_B8_A8_Unorm R8_G8_B8_A8_Unorm R8_G8_B8_A8_UnormSrgb";
	case 0x02: return "R32_Float R32_Float R32_Float";
	case 0x03: return "R16_G16_B16_A16_Float R16_G16_B16_A16_Float R16_G16_B16_A16_Float";
	case 0x04: return "R32_G32_B32_A32_Float R32_G32_B32_A32_Float R32_G32_B32_A32_Float";
	case 0x05: return "D24_Unorm_S8_Uint D24_Unorm_S8_Uint D24_Unorm_S8_Uint D24_Unorm_S8_Uint";
	case 0x06: return "Bc1_Unorm Bc1_Unorm Bc1_UnormSrgb Bc1_Unorm Bc1_UnormSrgb";
	case 0x07: return "Bc2_Unorm Bc2_Unorm Bc2_UnormSrgb Bc2_Unorm Bc2_UnormSrgb";
	case 0x08: return "Bc3_Unorm Bc3_Unorm Bc3_UnormSrgb Bc3_Unorm Bc3_UnormSrgb";
	case 0x09: return "R8_G8_B8_A8_Unorm R8_G8_B8_A8_Unorm R8_G8_B8_A8_UnormSrgb R8_G8_B8_A8_Unorm R8_G8_B8_A8_UnormSrgb";
	case 0x0A: return "R8_G8_B8_A8_Unorm R8_G8_B8_A8_Unorm R8_G8_B8_A8_UnormSrgb";
	case 0x0B: return "R32_Float R32_Float R32_Float";
	case 0x0C: return "R16_G16_B16_A16_Float R16_G16_B16_A16_Float R16_G16_B16_A16_Float";
	case 0x0D: return "R32_G32_B32_A32_Float R32_G32_B32_A32_Float R32_G32_B32_A32_Float";
	case 0x0F: return "R8_Unorm R8_Unorm R8_Unorm";
	case 0x10: return "Bc1_Unorm Bc1_Unorm Bc1_UnormSrgb Bc1_Unorm Bc1_UnormSrgb";
	case 0x11: return "Bc2_Unorm Bc2_Unorm Bc2_UnormSrgb Bc2_Unorm Bc2_UnormSrgb";
	case 0x12: return "Bc3_Unorm Bc3_Unorm Bc3_UnormSrgb Bc3_Unorm Bc3_UnormSrgb";
	case 0x13: return "D24_Unorm_S8_Uint D24_Unorm_S8_Uint D24_Unorm_S8_Uint D24_Unorm_S8_Uint";
	case 0x14: return "D16_Unorm D16_Unorm D16_Unorm";
	case 0x15: return "D16_Unorm D16_Unorm D16_Unorm";
	case 0x16: return "R16_Unorm R16_Unorm R16_Unorm";
	case 0x17: return "R16_Unorm R16_Unorm R16_Unorm";
	case 0x18: return "R8_Unorm R8_Unorm R8_Unorm";
	case 0x19: return "B5_G6_R5_Unorm B5_G6_R5_Unorm B5_G6_R5_Unorm";
	case 0x1C: return "B5_G6_R5_Unorm B5_G6_R5_Unorm B5_G6_R5_Unorm";
	case 0x21: return "R8_G8_B8_A8_Unorm R8_G8_B8_A8_Unorm R8_G8_B8_A8_UnormSrgb";
	case 0x22: return "R8_G8_B8_A8_Unorm R8_G8_B8_A8_Unorm R8_G8_B8_A8_UnormSrgb";
	case 0x23: return "R16_G16_Unorm R16_G16_Unorm R16_G16_Unorm";
	case 0x24: return "R16_G16_Unorm R16_G16_Unorm R16_G16_Unorm";
	case 0x2A: return "R8_Unorm R8_Unorm R8_Unorm";
	case 0x34: return "R5_G6_B5_Unorm R5_G6_B5_Unorm R5_G6_B5_Unorm";
	case 0x35: return "R5_G5_B5_A1_Unorm R5_G5_B5_A1_Unorm R5_G5_B5_A1_Unorm";
	case 0x36: return "R4_G4_B4_A4_Unorm R4_G4_B4_A4_Unorm R4_G4_B4_A4_Unorm";
	case 0x3B: return "R5_G6_B5_Unorm R5_G6_B5_Unorm R5_G6_B5_Unorm";
	case 0x3C: return "R5_G5_B5_A1_Unorm R5_G5_B5_A1_Unorm R5_G5_B5_A1_Unorm";
	case 0x3D: return "R4_G4_B4_A4_Unorm R4_G4_B4_A4_Unorm R4_G4_B4_A4_Unorm";
	case 0x40: return "R10_G10_B10_A2_Unorm R10_G10_B10_A2_Unorm R10_G10_B10_A2_Unorm";
	case 0x41: return "R16_G16_B16_A16_Unorm R16_G16_B16_A16_Unorm R16_G16_B16_A16_Unorm";
	case 0x42: return "R10_G10_B10_A2_Unorm R10_G10_B10_A2_Unorm R10_G10_B10_A2_Unorm";
	case 0x43: return "R16_G16_B16_A16_Unorm R16_G16_B16_A16_Unorm R16_G16_B16_A16_Unorm";
	case 0x46: return "R8_G8_Unorm R8_G8_Unorm R8_G8_Unorm";
	case 0x4C: return "R32_G32_Float R32_G32_Float R32_G32_Float";
	case 0x4D: return "R32_G32_Float R32_G32_Float R32_G32_Float";
	case 0x4E: return "D32_Float D32_Float D32_Float";
	case 0x4F: return "D32_Float D32_Float D32_Float";
	case 0x59: return "Bc1_Unorm Bc1_Unorm Bc1_UnormSrgb Bc1_Unorm Bc1_UnormSrgb";
	case 0x5A: return "Bc2_Unorm Bc2_Unorm Bc2_UnormSrgb Bc2_Unorm Bc2_UnormSrgb";
	case 0x5B: return "Bc3_Unorm Bc3_Unorm Bc3_UnormSrgb Bc3_Unorm Bc3_UnormSrgb";
	case 0x5C: return "Bc4_Unorm Bc4_Unorm Bc4_Unorm";
	case 0x5D: return "Bc5_Unorm Bc5_Unorm Bc5_Unorm";
	case 0x5E: return "Bc6_Ufloat Bc6_Ufloat Bc6_Ufloat";
	case 0x5F: return "Bc7_Unorm Bc7_Unorm Bc7_UnormSrgb Bc7_Unorm Bc7_UnormSrgb";
	case 0x60: return "Bc1_Unorm Bc1_Unorm Bc1_UnormSrgb Bc1_Unorm Bc1_UnormSrgb";
	case 0x61: return "Bc2_Unorm Bc2_Unorm Bc2_UnormSrgb Bc2_Unorm Bc2_UnormSrgb";
	case 0x62: return "Bc3_Unorm Bc3_Unorm Bc3_UnormSrgb Bc3_Unorm Bc3_UnormSrgb";
	case 0x63: return "Bc4_Unorm Bc4_Unorm Bc4_Unorm";
	case 0x64: return "Bc5_Unorm Bc5_Unorm Bc5_Unorm";
	case 0x65: return "Bc6_Ufloat Bc6_Ufloat Bc6_Ufloat";
	case 0x66: return "Bc7_Unorm Bc7_Unorm Bc7_UnormSrgb Bc7_Unorm Bc7_UnormSrgb";
	case 0x67: return "R8_G8_B8_A8_Uint R8_G8_B8_A8_Uint R8_G8_B8_A8_Uint";
	case 0x68: return "R8_G8_Uint R8_G8_Uint R8_G8_Uint";
	case 0x69: return "R16_G16_Float R16_G16_Float R16_G16_Float";
	case 0x6A: return "R16_Float R16_Float R16_Float";
	case 0x6B: return "R11_G11_B10_Float R11_G11_B10_Float R11_G11_B10_Float";
	case 0x6C: return "D32_Float_S8_Uint_X24 D32_Float_S8_Uint_X24 D32_Float_S8_Uint_X24 D32_Float_S8_Uint_X24";
	case 0x6D: return "D32_Float_S8_Uint_X24 D32_Float_S8_Uint_X24 D32_Float_S8_Uint_X24 D32_Float_S8_Uint_X24";
	case 0x72: return "R8_Unorm R8_Unorm R8_Unorm";
	case 0x73: return "R8_G8_Unorm R8_G8_Unorm R8_G8_Unorm";
	case 0x74: return "R8_G8_B8_A8_Uint R8_G8_B8_A8_Uint R8_G8_B8_A8_Uint";
	case 0x75: return "R8_G8_Uint R8_G8_Uint R8_G8_Uint";
	case 0x76: return "R16_G16_Float R16_G16_Float R16_G16_Float";
	case 0x77: return "R16_Float R16_Float R16_Float";
	case 0x78: return "R11_G11_B10_Float R11_G11_B10_Float R11_G11_B10_Float";
	case 0x7D: return "ASTC_FORMAT";
	case 0x7E: return "ASTC_FORMAT";
	default:   return "Unknown format";
		break;
	}
}

std::string getPS5FormatStr(uint8_t format)
{
	switch (format)
	{                 // Channel Order is RGBA
	case 0x00: return "R8G8B8A8 A8B8G8R8 RGBA RED GREEN BLUE ALPHA";
	case 0x01: return "R8G8B8A8 A8B8G8R8 BGRA BLUE GREEN RED ALPHA";
	case 0x02: return "R32F RXXX RED NONE NONE NO_ALPHA";
	case 0x03: return "R16F RGBA RED GREEN BLUE ALPHA";
	case 0x04: return "RGBA32F RGBA RED GREEN BLUE ALPHA";
	case 0x05: return "RXXX RED NONE NONE NO_ALPHA";
	case 0x06: return "DXT1 DXT1_SRGB RGBA RED GREEN BLUE ALPHA";
	case 0x07: return "DXT3 DXT3_SRGB RGBA RED GREEN BLUE ALPHA";
	case 0x08: return "DXT5 DXT5_SRGB RGBA RED GREEN BLUE ALPHA";
	case 0x09: return "R8G8B8A8 A8B8G8R8 RGBA RED GREEN BLUE ALPHA";
	case 0x0A: return "R8G8B8A8 A8B8G8R8 BGRA BLUE GREEN RED ALPHA";
	case 0x0B: return "R32F RXXX RED NONE NONE NO_ALPHA";
	case 0x0C: return "R16F RGBA RED GREEN BLUE ALPHA";
	case 0x0D: return "RGBA32F RGBA RED GREEN BLUE ALPHA";
	case 0x0E: return "A2B10G10R10 RGBA RED GREEN BLUE ALPHA";
	case 0x0F: return "A8 XXXR NONE NONE NONE RED";
	case 0x10: return "DXT1 DXT1_SRGB RGBA RED GREEN BLUE ALPHA";
	case 0x11: return "DXT3 DXT3_SRGB RGBA RED GREEN BLUE ALPHA";
	case 0x12: return "DXT5 DXT5_SRGB RGBA RED GREEN BLUE ALPHA";
	case 0x13: return "RXXX RED NONE NONE NO_ALPHA";
	case 0x14: return "R16 RXXX RED NONE NONE NO_ALPHA";
	case 0x15: return "R16 RXXX RED NONE NONE NO_ALPHA";
	case 0x16: return "R16 RXXX RED NONE NONE NO_ALPHA";
	case 0x17: return "R16 RXXX RED NONE NONE NO_ALPHA";
	case 0x18: return "A8 XXXR NONE NONE NONE RED";
	case 0x19: return "B5G6R5 BGRX BLUE GREEN RED NO_ALPHA";
	case 0x1A: return "B5G5R5A1 BGRA BLUE GREEN RED ALPHA";
	case 0x1B: return "ARGB BGRA BLUE GREEN RED ALPHA";
	case 0x1C: return "B5G6R5 BGRX BLUE GREEN RED NO_ALPHA";
	case 0x1D: return "B5G5R5A1 BGRA BLUE GREEN RED ALPHA";
	case 0x1E: return "ARGB BGRA BLUE GREEN RED ALPHA";
	case 0x1F: return "RXXX RED NONE NONE NO_ALPHA";
	case 0x20: return "RXXX RED NONE NONE NO_ALPHA";
	case 0x21: return "R8G8B8A8 A8B8G8R8 BGRA BLUE GREEN RED ALPHA";
	case 0x22: return "R8G8B8A8 A8B8G8R8 BGRA BLUE GREEN RED ALPHA";
	case 0x23: return "R16G16 GRXX GREEN RED NONE NO_ALPHA";
	case 0x24: return "R16G16 GRXX GREEN RED NONE NO_ALPHA";
	case 0x25: return "BGRA BLUE GREEN RED ALPHA";
	case 0x26: return "G8R8 R8G8 XGRX NONE GREEN RED NO_ALPHA";
	case 0x27: return "G8R8 RXXG RED NONE NONE GREEN";
	case 0x28: return "A8 A8_SIGNED XXRX NONE NONE RED NO_ALPHA";
	case 0x29: return "A8 A8_SIGNED XRXX NONE RED NONE NO_ALPHA";
	case 0x2A: return "A8 A8_SIGNED RXXX RED NONE NONE NO_ALPHA";
	case 0x2B: return "RRRX RED RED RED NO_ALPHA";
	case 0x2C: return "A8 A8_SIGNED RRRX RED RED RED NO_ALPHA";
	case 0x2D: return "A4L4 RRRG RED RED RED GREEN";
	case 0x2E: return "G8R8 RRRG RED RED RED GREEN";
	case 0x2F: return "RXXX RED NONE NONE NO_ALPHA";
	case 0x30: return "A8 A8_SIGNED RXXX RED NONE NONE NO_ALPHA";
	case 0x31: return "B5G6R5 RGBA RED GREEN BLUE ALPHA";
	case 0x32: return "B5G5R5A1 RGBA RED GREEN BLUE ALPHA";
	case 0x33: return "ARGB RGBA RED GREEN BLUE ALPHA";
	case 0x34: return "B5G6R5 RGBX RED GREEN BLUE NO_ALPHA";
	case 0x35: return "B5G5R5A1 RGBA RED GREEN BLUE ALPHA";
	case 0x36: return "ARGB RGBA RED GREEN BLUE ALPHA";
	case 0x37: return "RGBA RED GREEN BLUE ALPHA";
	case 0x38: return "RGBA RED GREEN BLUE ALPHA";
	case 0x39: return "RGBA RED GREEN BLUE ALPHA";
	case 0x3A: return "RGBA RED GREEN BLUE ALPHA";
	case 0x3B: return "B5G6R5 RGBX RED GREEN BLUE NO_ALPHA";
	case 0x3C: return "B5G5R5A1 RGBA RED GREEN BLUE ALPHA";
	case 0x3D: return "ARGB RGBA RED GREEN BLUE ALPHA";
	case 0x3E: return "RGBA RED GREEN BLUE ALPHA";
	case 0x3F: return "RGBA RED GREEN BLUE ALPHA";
	case 0x40: return "R10G10B10A2 RGBA RED GREEN BLUE ALPHA";
	case 0x41: return "R16G16B16A16 RGBA RED GREEN BLUE ALPHA";
	case 0x42: return "R10G10B10A2 RGBA RED GREEN BLUE ALPHA";
	case 0x43: return "R16G16B16A16 RGBA RED GREEN BLUE ALPHA";
	case 0x44: return "XXXR NONE NONE NONE RED";
	case 0x45: return "RGBX RED GREEN BLUE NO_ALPHA";
	case 0x46: return "G8R8 R8G8 RGXX RED GREEN NONE NO_ALPHA";
	case 0x47: return "RGBX RED GREEN BLUE NO_ALPHA";
	case 0x48: return "RGBA RED GREEN BLUE ALPHA";
	case 0x49: return "RGBX RED GREEN BLUE NO_ALPHA";
	case 0x4A: return "RXXX RED NONE NONE NO_ALPHA";
	case 0x4B: return "RXXX RED NONE NONE NO_ALPHA";
	case 0x4C: return "R32G32_FLOAT GRXX GREEN RED NONE NO_ALPHA";
	case 0x4D: return "R32G32_FLOAT GRXX GREEN RED NONE NO_ALPHA";
	case 0x4E: return "R32F RXXX RED NONE NONE NO_ALPHA";
	case 0x4F: return "R32F RXXX RED NONE NONE NO_ALPHA";
	case 0x50: return "RGBA RED GREEN BLUE ALPHA";
	case 0x51: return "RGBA RED GREEN BLUE ALPHA";
	case 0x52: return "RGBA RED GREEN BLUE ALPHA";
	case 0x53: return "RGBA RED GREEN BLUE ALPHA";
	case 0x54: return "A8 A8_SIGNED RRRX RED RED RED NO_ALPHA";
	case 0x55: return "G8R8 RRRG RED RED RED GREEN";
	case 0x56: return "RGBX RED GREEN BLUE NO_ALPHA";
	case 0x57: return "RGBA RED GREEN BLUE ALPHA";
	case 0x58: return "RGBA RED GREEN BLUE ALPHA";
	case 0x59: return "DXT1 DXT1_SRGB RGBA RED GREEN BLUE ALPHA";
	case 0x5A: return "DXT3 DXT3_SRGB RGBA RED GREEN BLUE ALPHA";
	case 0x5B: return "DXT5 DXT5_SRGB RGBA RED GREEN BLUE ALPHA";
	case 0x5C: return "BC4 RXXX RED NONE NONE NO_ALPHA";
	case 0x5D: return "BC5 RGXX RED GREEN NONE NO_ALPHA";
	case 0x5E: return "BC6H RGBX RED GREEN BLUE NO_ALPHA";
	case 0x5F: return "BC7 BC7_SRGB RGBA RED GREEN BLUE ALPHA";
	case 0x60: return "DXT1 DXT1_SRGB RGBA RED GREEN BLUE ALPHA";
	case 0x61: return "DXT3 DXT3_SRGB RGBA RED GREEN BLUE ALPHA";
	case 0x62: return "DXT5 DXT5_SRGB RGBA RED GREEN BLUE ALPHA";
	case 0x63: return "BC4 RXXX RED NONE NONE NO_ALPHA";
	case 0x64: return "BC5 RGXX RED GREEN NONE NO_ALPHA";
	case 0x65: return "BC6H RGBX RED GREEN BLUE NO_ALPHA";
	case 0x66: return "BC7 BC7_SRGB RGBA RED GREEN BLUE ALPHA";
	case 0x67: return "RGBA8UI RGBA RED GREEN BLUE ALPHA";
	case 0x68: return "RG8UI RGXX RED GREEN NONE NO_ALPHA";
	case 0x69: return "RG16F RGXX RED GREEN NONE NO_ALPHA";
	case 0x6A: return "R16_HALF_FLOAT RXXX RED NONE NONE NO_ALPHA";
	case 0x6B: return "R11F_G11F_B10F RGBX RED GREEN BLUE NO_ALPHA";
	case 0x6C: return "R32F RXXX RED NONE NONE NO_ALPHA";
	case 0x6D: return "R32F RXXX RED NONE NONE NO_ALPHA";
	case 0x6E: return "R16 RXXX RED NONE NONE NO_ALPHA";
	case 0x6F: return "RGBA RED GREEN BLUE ALPHA";
	case 0x70: return "RGBA RED GREEN BLUE ALPHA";
	case 0x71: return "RGBA RED GREEN BLUE ALPHA";
	case 0x72: return "A8 A8_SIGNED RXXX RED NONE NONE NO_ALPHA";
	case 0x73: return "G8R8 R8G8 RGXX RED GREEN NONE NO_ALPHA";
	case 0x74: return "RGBA8UI RGBA RED GREEN BLUE ALPHA";
	case 0x75: return "RG8UI RGXX RED GREEN NONE NO_ALPHA";
	case 0x76: return "RG16F RGXX RED GREEN NONE NO_ALPHA";
	case 0x77: return "R16_HALF_FLOAT RXXX RED NONE NONE NO_ALPHA";
	case 0x78: return "R11F_G11F_B10F RGBX RED GREEN BLUE NO_ALPHA";
	case 0x79: return "R16 RXXX RED NONE NONE NO_ALPHA";
	case 0x7A: return "RXXX RED NONE NONE NO_ALPHA";
	case 0x7B: return "RGXX RED GREEN NONE NO_ALPHA";
	case 0x7C: return "RGBA RED GREEN BLUE ALPHA";
	case 0x7D: return "ASTC_FORMAT";
	case 0x7E: return "ASTC_FORMAT";
	default:   return "Unknown format";
		break;
	}
}

std::string getFormatStr(PLATFORM system, uint8_t format)
{
	switch (system)
	{
	case PLATFORM::PS2:     return "PS2 raw";
	case PLATFORM::PS3:     return getPS3FormatStr(format);
	case PLATFORM::X360:    return getX360FormatStr(format);
	case PLATFORM::NWii:    return getNWiiFormatStr(format);
	case PLATFORM::N3DS:    return getN3DSFormatStr(format);
	case PLATFORM::PSVita:  return getPSVitaFormatStr(format);
	case PLATFORM::Android: return getAndroidFormatStr(format);
	case PLATFORM::iOS:     return getiOSFormatStr(format);
	case PLATFORM::NWiiU:   return getNWiiUFormatStr(format);
	case PLATFORM::WinMac:  
	case PLATFORM::WinDX12: return getWinMacFormatStr(format);
	case PLATFORM::PS4:     return getPS4FormatStr(format);
	case PLATFORM::NSwitch: return getNSwitchFormatStr(format);
	case PLATFORM::PS5:     return getPS5FormatStr(format);
	default: return "Unknown system format";
	}
}

#endif // !G1T_FORMAT_STR_H